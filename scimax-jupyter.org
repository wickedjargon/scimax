#+title: scimax-jupyter

There are two approaches to using jupyter in scimax.

The first one is based on https://github.com/gregsexton/ob-ipython which uses a web-server to communicate with the kernel. This is currently ([2021-11-02 Tue]) the default in scimax.

The second one is based on https://github.com/nnicandro/emacs-jupyter which uses a compiled module to communicate directly with a kernel using zeromq. This requires that you have an emacs with support for compiled modules, and that you are able to compile it.

I have been trying to move away from ob-ipython. The web-server really limits things like completion and inspection, and also is sometimes problematic in debugging. Using zeromq to interface with the kernel solves some of these problems. This document shows how to use it.

It is not the default (yet) because you have to be able to compile the zmq library, and at least on my Mac, this requires some manual intervention. I am not sure how easy it is to do that in Windows.


#+BEGIN_SRC emacs-lisp
(use-package scimax-jupyter)
#+END_SRC

* Customization in scimax

Overall, emacs-jupyter is an improvement on ob-ipython. There are a few things I want that don't come out of the box with emacs-jupyter. Here are a few customizations I have done in scimax.

** default header args

These are the settings that work well for me.

#+BEGIN_SRC emacs-lisp :results pp
org-babel-default-header-args:jupyter-python
#+END_SRC

#+RESULTS:
#+begin_example
((:results . "both")
 (:session . "jupyter-python")
 (:kernel . "python3")
 (:pandoc . "t")
 (:exports . "both")
 (:cache . "no")
 (:noweb . "no")
 (:hlines . "no")
 (:tangle . "no")
 (:eval . "never-export"))
#+end_example

Some of these are scimax-specific. For example =:results . "both"= captures both printed and returned values, which is most consistent with Jupyter notebooks. I set =:pandoc . "t"= to convert outputs like html to org format.


** buffer specific kernels that close when you kill the buffer

I find it confusing to have one kernel shared among many files. 

1. It is easy to mess up the state if you use similar variables in different files
2. I often assume the CWD is the file I work from, but the kernel starts in the directory it was started in, which is often different than another org-file
3. I want the kernel to shutdown and close when I close the buffer because I don't need it after that.

You can set a buffer specific kernel with yasnippet: <jps

#+PROPERTY: header-args:jupyter-python  :session jupyter-6186d1147f976aff2402c12bfd60de5e

scimax closes kernels when you close their buffer.

** :results raw seemed to be broken in emacs-jupyter

and it works in scimax.

[[elisp:(scimax-jupyter-advise t)]] this un-advises emacs-jupyter

Not raw
#+BEGIN_SRC jupyter-python 
for i in range(3):
    print(i)
#+END_SRC

#+RESULTS:
: 0
: 1
: 2


#+BEGIN_SRC jupyter-python :results raw
for i in range(3):
    print(i)
#+END_SRC

#+RESULTS:



[[elisp:(scimax-jupyter-advise)]] this advises emacs-jupyter the scimax way


** emacs-jupyter in scimax is more consistent with org-babel

Out of the box you get mixed output and value with =:results value= and not quite the right way.  On one hand that is consistent with what you would get in a terminal. OTOH, it is not fully consistent with org-babel.

I modified this to be closer to org-babel behavior. Note, however that if you have any code that uses Ipython display (e.g. plots, rich outputs, etc.) You will not get what you expect. The display results always come last, and it is not clear you can put them in order to get the right last line.

- :results value  returns the last line.

#+BEGIN_SRC jupyter-python :results value
print(5)

3-5
#+END_SRC

#+RESULTS:
:RESULTS:
-2
:END:

If you choose output for results, that is all you get, there is nothing returned for the last line.

#+BEGIN_SRC jupyter-python :results output
print(5)


[9 + 9, 4]
3-5
#+END_SRC

#+RESULTS:
:RESULTS:
5
:END:

scimax provides "both" to get the original behavior. This is also the default setting in scimax.

#+BEGIN_SRC jupyter-python :results both
print(5)

[9 + 9, 4]
#+END_SRC

#+RESULTS:
:RESULTS:
5
| 18 | 4 |
:END:

** scimax jupyter src-block hydra

Try it: elisp:scimax-jupyter-org-hydra/body

Easy access to:
- inspect (M-i)
- completion (M-tab)
- editing functions
- kernel management

* Examples of usage

** Getting help

#+BEGIN_SRC jupyter-python
import numpy as np

?np.linspace
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python
??np.linspace
#+END_SRC

#+RESULTS:

If you have your cursor on linspace, type M-i or f12-/ to inspect it.

#+BEGIN_SRC jupyter-python
np.linspace
#+END_SRC



** Completion

Use M-tab to complete the thing at point. Sometimes you have to type it more than once.

#+BEGIN_SRC jupyter-python
np.
#+END_SRC




** Plotting with matplotlib

Figures work like you expect. Note here that the printed text comes first, then the figures, even though the code is not in that order. It appears that the order is not precisely guaranteed. 


#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import numpy as np

t = np.linspace(0, 20 * np.pi, 350)
x = np.exp(-0.1 * t) * np.sin(t)
y = np.exp(-0.1 * t) * np.cos(t)

plt.plot(x, y)
plt.axis('equal')

plt.figure()
plt.plot(y, x)

plt.axis('equal')

print('Length of t = {}'.format(len(t)))
print('x .dot. y = {}'.format(x @ y))
#+END_SRC

#+RESULTS:
:RESULTS:
Length of t = 350
x .dot. y = 1.3598389888491538
[[file:./.ob-jupyter/a52845542412d18942cdfd219023af1385da4c0d.png]]
[[file:./.ob-jupyter/14a1c6c91d53a606c5ae297964c8ce5c769b17d5.png]]
:END:



** plotly

Emacs still does not natively render html or interactive javascript. Until that happens, I monkey-patched plotly to capture a static image, and save the interactive html so you can still use it in a browser.

#+BEGIN_SRC jupyter-python
from pycse.plotly import *

import plotly.express as px
df = px.data.iris()
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species",
                 size='petal_length', hover_data=['petal_width'])
fig.show()
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:.ob-jupyter/5e2c341e3c9e3456a944ba46a8a9f071.html]]
[[file:./.ob-jupyter/2f642ad6943faf5b9c0de1d90b7df76f52390546.png]]
:END:


** pandas

using the =pandoc: "t"= header generally makes pandas behave well with org-mode. Turn that off if you want with an empty header like =:pandoc=

#+BEGIN_SRC jupyter-python 
import pandas as pd

f = pd.DataFrame([['a', 'b'], [1, 2]])
display(f)
#+END_SRC

#+RESULTS:
:RESULTS:
|   | 0 | 1 |
|---+---+---|
| 0 | a | b |
| 1 | 1 | 2 |
:END:

** Figures and Tables with captions, names, attributes

pycse.orgmode defines several helpful classes to make org figures and tables with attributes.


#+BEGIN_SRC jupyter-python
from pycse.orgmode import *

Table([['x', 'y'],
       [1, 2],
       [3, 4]],
      headers='firstrow',
      name='org-data',
      caption='The information about the table',
      attributes=[('latex', ':environment longtable :align |l||l|')])
#+END_SRC

#+RESULTS:
:RESULTS:
#+attr_latex: :environment longtable :align |l||l|
#+name: org-data
#+caption: The information about the table
| x | y |
|---+---|
| 1 | 2 |
| 3 | 4 |
:END:


#+BEGIN_SRC jupyter-python 
import matplotlib.pyplot as plt

f = './test.png'
plt.plot([1, 4, 17])
plt.savefig(f)
plt.close() # you need this to not see two figures.
Figure(f, name='org-fig', caption='a line plot',
       attributes=[('org', ':width 300'),
                   ('latex', ':placement [H]')])
#+END_SRC

#+RESULTS:
:RESULTS:
#+attr_org: :width 300
#+attr_latex: :placement [H]
#+name: org-fig
#+caption: a line plot
[[./test.png]]
:END:

#+BEGIN_SRC jupyter-python
import matplotlib.pyplot as plt
import numpy as np

t = np.linspace(0, 20 * np.pi, 350)
x = np.exp(-0.1 * t) * np.sin(t)
y = np.exp(-0.1 * t) * np.cos(t)

plt.plot(x, y)
plt.axis('equal')
plt.savefig('fig-1.png')
plt.close()

plt.figure()
plt.plot(y, x)
plt.axis('equal')
plt.savefig('fig-2.png')
plt.close()

print('Length of t = {}'.format(len(t)))
print('x .dot. y = {}'.format(x @ y))

from pycse.orgmode import Figure, Org

display(Org("\n\n"),
        Figure('./fig-1.png', name='clock',
               caption='a clockwise line plot'),
        Org("\n\n"),
        Figure('./fig-2.png', name='counterclock',
               caption='a counter-clockwise line plot'))
#+END_SRC

#+RESULTS:
:RESULTS:
Length of t = 350
x .dot. y = 1.3598389888491538



#+name: clock
#+caption: a clockwise line plot
[[./fig-1.png]]



#+name: counterclock
#+caption: a counter-clockwise line plot
[[./fig-2.png]]
:END:


#+BEGIN_SRC jupyter-python
import pandas as pd

Table(pd.DataFrame([['a', 'b'],
                    [1, 2],
                    [5, 6]]),
      headers='firstrow',
      name='pd-data',
      caption='A table from a dataframe')
#+END_SRC

#+RESULTS:
:RESULTS:
#+name: pd-data
#+caption: A table from a dataframe
| 0 | a | b |
|---+---+---|
| 1 | 1 | 2 |
| 2 | 5 | 6 |
:END:

There is also a keyword.

#+BEGIN_SRC jupyter-python
Keyword('name', 'fig-1')    
#+END_SRC

#+RESULTS:
:RESULTS:
#+name: fig-1
:END:

and a comment.

#+BEGIN_SRC jupyter-python
Heading('An example of a heading from code', 3)
#+END_SRC

#+RESULTS:
:RESULTS:
*** An example of a heading from code
:END:



#+BEGIN_SRC jupyter-python
Comment('A comment for orgmode')
#+END_SRC

#+RESULTS:
:RESULTS:
# A comment for orgmode
:END:



** Exceptions 

Exceptions go in the results. Type f12 e to jump to the exception in the src block.



#+BEGIN_SRC jupyter-python 
print(5)


a = 5



(



for j in range(5):
    1 / 0



print(54)

print(z)

#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
  File "/var/folders/3q/ht_2mtk52hl7ydxrcr87z2gr0000gn/T/ipykernel_39351/2049798434.py", line 8
    )
    ^
SyntaxError: unmatched ')'
:END:



** Select rich outputs with :display

The priority for [[https://github.com/nnicandro/emacs-jupyter#rich-kernel-output-1][display]] is:
- text/org
- image/svg+xml, image/jpeg, image/png
- text/html
- text/markdown
- text/latex
- text/plain

LaTeX is automatically rendered to a png

#+BEGIN_SRC jupyter-python
from sympy import *
init_printing()
x, y, z = symbols('x y z')

display(Integral(sqrt(1 / x), x))
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/aaa721727d61fc47479b455e22f44ed88a8e0cb1.png]]
:END:


To get the actual LaTeX, use the :display

#+BEGIN_SRC jupyter-python :display text/latex
from sympy import *
init_printing()
x, y, z = symbols('x y z')

display(Integral(sqrt(1 / x), x))
#+END_SRC

#+RESULTS:
:RESULTS:
$\displaystyle \int \sqrt{\frac{1}{x}}\, dx$
:END:

and to get it in plain text:

#+BEGIN_SRC jupyter-python :display text/plain
from sympy import *
init_printing()
x, y, z = symbols('x y z')

display(Integral(sqrt(1 / x), x))
#+END_SRC

#+RESULTS:
:RESULTS:
⌠           
⎮     ___   
⎮    ╱ 1    
⎮   ╱  ─  dx
⎮ ╲╱   x    
⌡           
:END:


** Rich displays mostly work

These get converted to org-syntax by pandoc I think.  Note that emacs-jupyter and/or pandoc seems to put some \\ in the converted results. I use the function scimax-rm-backslashes in a hook to remove these. 


#+BEGIN_SRC jupyter-python 
from IPython.display import FileLink, Image, display

display(FileLink('scimax.png'))
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:scimax.png]]
:END:


#+BEGIN_SRC jupyter-python
display(Image('test.png'))
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:./.ob-jupyter/7377ddd106aeca2bac31a5dad7a8ddbf26749a0d.png]]
:END:




#+BEGIN_SRC jupyter-python
display(FileLink('scimax.png'), Image('test.png'))
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:scimax.png]]
[[file:./.ob-jupyter/7377ddd106aeca2bac31a5dad7a8ddbf26749a0d.png]]
:END:

Not every type is easily converted to org-mode, pandoc doesn't know everything. 

#+BEGIN_SRC jupyter-python
from IPython.display import Audio

audio = Audio(filename='/Users/jkitchin/Dropbox/emacs/scimax/2021-06-04-19-48-38.mp3')

display(audio)
#+END_SRC

#+RESULTS:
:RESULTS:
Your browser does not support the audio element.
:END:

We can "orgify" these like this.

#+BEGIN_SRC jupyter-python
from pycse.orgmode import *

ip = get_ipython()

orgf = ip.display_formatter.formatters['text/org']
orgf.for_type_by_name('IPython.lib.display', 'Audio', lambda O: f'[[{O.filename}]]')


audio = Audio(filename='./2021-06-04-19-48-38.mp3')
audio
#+END_SRC

#+RESULTS:
:RESULTS:
[[./2021-06-04-19-48-38.mp3]]
:END:


Some of these are already orgified, e.g. YouTubeVideo.

#+BEGIN_SRC jupyter-python
from IPython.display import YouTubeVideo

YouTubeVideo('ZXSaLcFSOsU')
#+END_SRC

#+RESULTS:
:RESULTS:
https://www.youtube.com/embed/ZXSaLcFSOsU
:END:
:RESULTS:


** scratch space and the REPL

The buffer is a great scratch space, but there is also a separate Jupyter scratch buffer. Use it to try out ideas, check values, etc.

#+BEGIN_SRC jupyter-python

#+END_SRC


Each kernel has a REPL associated with it. Type C-c C-v C-z or f12-z to get to it. It is like an IPython shell! You can explore things there, make plots, etc...

** REPL like interaction mode in src blocks


#+BEGIN_SRC jupyter-python
print(3) 
3 + 4  # highlight region, C-M-x to run it.

a = 5  # Run C-x C-e here
5 + a  # Then, M-i here to inspect a
#+END_SRC

#+RESULTS:
:RESULTS:
3
10
:END:

** debugging with the REPL

Put a breakpoint in a function. Define it, then go to the REPL (f12 z) to step through it.

#+BEGIN_SRC jupyter-python
def f(x):
    breakpoint()
    return 1 / x
#+END_SRC

#+RESULTS:

learn more about PDB at https://realpython.com/python-debugging-pdb/#getting-started-printing-a-variables-value.

** Export to ipynb

See ox-ipynb. This org-file is not ideal for this export, it has some links that are not supported, and I marked the Known issues section as noexport because it has src-blocks with variables in it.

#+ox-ipynb-language: jupyter-python
#+BEGIN_SRC emacs-lisp
(setq  org-export-with-broken-links t)
(ox-ipynb-export-to-ipynb-file-and-open)
#+END_SRC

#+RESULTS:
: #<window 57 on *Async Shell Command*>


* Other languages
** Julia seems to work

[[./scimax-jupyter-julia.org]]


** R

[[./scimax-jupyter-r.org]]
* Known issues                                                     :noexport:

** display order is not always respected

See https://github.com/nnicandro/emacs-jupyter/issues/351

When using pandoc, it takes time to convert the display, and this often messes up the display order. scimax overrides this behavior to try avoiding this. The root of the issue seems to be there is a process filter that processes data in the order it is received though, so I cannot guarantee the order will always be correct. For now what we do works here.

#+BEGIN_SRC jupyter-python :pandoc t
from IPython.display import HTML, Markdown, Latex

print(1)
display(HTML('<b>bold</b>'),
        Latex('\\bf{lbold}'),
        Markdown('**mbold**'))
print(2)
#+END_SRC

#+RESULTS:
:RESULTS:
1
*bold*
*lbold*
*mbold*
2
:END:

This works now for making Figures.

#+BEGIN_SRC jupyter-python
from IPython.display import Image, Markdown, HTML

print(1)
display(HTML('''#+attr_org: :width 400<br>
,#+name: fig-one<br>
,#+caption: <b>bold</b> text.'''),
  Image('test.png'))
#+END_SRC

#+RESULTS:
:RESULTS:
1
#+attr_org: :width 400
#+name: fig-one
#+caption: *bold* text.
[[file:./.ob-jupyter/7377ddd106aeca2bac31a5dad7a8ddbf26749a0d.png]]
:END:


** TODO using jupyter-python blocks as input to other blocks was broken in emacs-jupyter and is sort of better in scimax

and it works in scimax, sort of. Raw strings get passed around, which isn't great. One day I will figure out the issue with that. It seems to be a feature of emacs-jupyter though (https://github.com/nnicandro/emacs-jupyter#standard-output-displayed-data-and-code-block-results_. It has something to do with org-babel-insert-result.

#+name: jp
#+BEGIN_SRC jupyter-python
a = 9 + 9
a
#+END_SRC

#+RESULTS: jp
[[file:./.ob-jupyter/a77f657842647650163b0d79cf27eb8555843d08.png]]

#+BEGIN_SRC emacs-lisp :var d=jp
d
#+END_SRC

#+RESULTS:
: [[file:./.ob-jupyter/de5224fcbbd86725f4baad31eba68268aed84617.png]]

*** example with a table

#+name: pd-data
#+BEGIN_SRC jupyter-python 
import pandas as pd
data = [[1, 2], [3, 4]]
pd.DataFrame(data, columns=["Foo", "Bar"])
#+END_SRC

#+RESULTS: pd-data
:RESULTS:
|   | Foo | Bar |
|---+-----+-----|
| 0 |   1 |   2 |
| 1 |   3 |   4 |
:END:


#+BEGIN_SRC emacs-lisp :var d=pd-data
d
#+END_SRC

#+RESULTS:
: |   | Foo | Bar |
: |---+-----+-----|
: | 0 | 1   | 2   |
: | 1 | 3   | 4   |


see [[nb:scimax::elpa/org-9.5/ob-emacs-lisp.el::c2254]]  I think it has something to do with this.

#+name: el-data
#+BEGIN_SRC emacs-lisp 
'(("" Foo Bar) hline (0 1 2) (1 3 4))
#+END_SRC

#+RESULTS: el-data
|   | Foo | Bar |
|---+-----+-----|
| 0 |   1 |   2 |
| 1 |   3 |   4 |

#+BEGIN_SRC emacs-lisp :var d=el-data 
d
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 |
| 1 | 3 | 4 |


** widgets do not seem to work

In theory emacs-jupyter supports widgets, if you build it in the emacs-jupyter src directory. I did that, and don't see any obvious issues, but this does not work. I am not likely to spend time fixing this anytime soon.

#+BEGIN_SRC emacs-lisp
(let ((default-directory (file-name-directory (locate-library "jupyter"))))
  (shell-command-to-string "make widgets"))
#+END_SRC

#+RESULTS:
#+begin_example
make -C js
/usr/local/bin/npm install

up to date, audited 1005 packages in 7s

7 packages are looking for funding
  run `npm fund` for details

48 vulnerabilities (29 moderate, 19 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
./node_modules/.bin/yarn run build --progress
yarn run v1.22.17
$ webpack --progress
 
Time: 3569ms
                               Asset     Size  Chunks                    Chunk Names
674f50d287a8c48dc19ba404d20fe713.eot   166 kB          [emitted]         
                      index.built.js  5.83 MB       0  [emitted]  [big]  main
   [8] (webpack)/buildin/global.js 509 bytes {0} [built]
  [29] (webpack)/buildin/module.js 517 bytes {0} [built]
 [425] ./index.js 512 bytes {0} [built]
 [710] ./manager.js 3.09 kB {0} [built]
 [754] ./emacs-jupyter.js 12.2 kB {0} [built]
 [813] ./node_modules/moment/locale ^\.\/.*$ 3.29 kB {0} [optional] [built]
    + 823 hidden modules
Done in 5.21s.
#+end_example

This at least outputs something, but I think it should open a browser.

#+BEGIN_SRC jupyter-python
import ipywidgets as widgets

w = widgets.VBox([widgets.Text('#+attr_org: :width 300'),
                  widgets.Text('#+name: fig-data'),
                  widgets.Text('#+caption: something here.')])
display(w)
#+END_SRC

#+RESULTS:
: VBox(children=(Text(value='#+attr_org: :width 300'), Text(value='#+name: fig-data'), Text(value='#+caption: so…

This code does not run correctly. I am not sure why. I don't think it is related to my changes. See https://github.com/nnicandro/emacs-jupyter/issues/333, I am not sure widgets still work.

This just hangs, and does not do anything.

#+BEGIN_SRC jupyter-python
widgets.Image(value=open("test.png", "rb").read(),  width=400)
#+END_SRC


* Wishlist
** handle long outputs

Sometimes you get long outputs from things, and especially when it is something that needs fontification, this makes Emacs hard to use. I would like to have a way to truncate long outputs, and maybe write them to a file where you could look at them.

** Jump to definition of variable or function

It would be awesome to do this. Probably this could build on  [[./scimax-literate-programming.el]] and [[./scimax-ob-flycheck.el]].

** inspect variables in function calls

This does not always work when variables are inside a call. I usually see help for the function then.

#+BEGIN_SRC jupyter-python
a = 5
print(a + 5)  # inspect a here, I usually see print documentation
#+END_SRC

#+RESULTS:
:RESULTS:
10
:END:
