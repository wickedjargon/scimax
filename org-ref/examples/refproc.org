#+title: Pretty thorough example of refproc
#+latex_header: \usepackage{cleveref}
#+refproc: :abbreviate t :capitalize t

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: sec-intro
  :END:

This document is a set of examples to see how the org-ref cross-reference processor works. Go to [[*build]] to run the preprocessor and do the exports.

** section references
   :PROPERTIES:
   :CUSTOM_ID: sec-headings
   :END:

- ref :: [[#sec-intro]]
- autoref :: Sec. [[#sec-intro]]
- nameref :: [[#sec-intro][Introduction]]
- pageref :: [[#sec-intro]]
- cref, one :: Sec. [[#sec-intro]]
- cref, two :: Secs. [[#sec-intro]] and [[#sec-headings]]
- cref, three, sorted :: Secs. [[#sec-intro]], [[#sec-headings]] and [[#sec-tables]]
- Cref :: Sec. [[#sec-intro]]
- Cref, two :: Secs. [[#sec-intro]] and [[#sec-headings]]
- Cref, three, sorted :: Secs. [[#sec-intro]], [[#sec-headings]] and [[#sec-tables]]


** tables refs
   :PROPERTIES:
   :CUSTOM_ID: sec-tables
   :END:

#+name: b1
#+caption: this is a table b1.
| 3 | 4 |


#+name: b2
#+caption: this is a table b2.
| 3 | 4 |


- ref :: [[b1]]
- autoref :: Tab. [[b1]]
- nameref :: [[b1][this is a table b1.]]
- pageref :: [[b1]]
- cref :: Tab. [[b1]]
- cref, two :: Tabs. [[b1]] and [[b2]]
- Cref :: Tab. [[b1]]
- Cref, two :: Tabs. [[b1]] and [[b2]]

** equations 

#+name: q1
\begin{equation}
3+3=6
\end{equation}


#+name: q2
\begin{equation}
3+3=6
\end{equation}

This equation will have a number in the ODT export.
#+name: q3
\begin{equation}
3+3=6
\end{equation}


- eqref :: ([[q1]])
- autoref :: Eq. [[q1]]

- cref :: Eqs. [[q1]] and [[q2]]
- Cref :: Eqs. [[q1]] and [[q2]]

** Listings

#+attr_latex: :placement [H]
#+name: s1
#+caption: listing caption s1
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

#+RESULTS: s1
:RESULTS:
| <matplotlib.lines.Line2D | at | 0x7fb4f0429b80> |
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]
:END:

#+attr_latex: :placement [H]
#+name: s2
#+caption: listing caption s2
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

#+attr_latex: :placement [H]
#+name: s3
#+caption: listing caption s3
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

#+attr_latex: :placement [H]
#+name: s4
#+caption: listing caption s4
#+BEGIN_SRC jupyter-python
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot([1, 2, 4])
#+END_SRC

- ref :: [[s1]]
- autoref :: Lst. [[s1]]
- nameref :: [[s1][listing caption s1]]
- cref :: Lst. [[s1]]
- cref, 2 :: Lsts. [[s1]] and [[s2]]  listings 1 and 2
- cref, 2, sorted :: Lsts. [[s1]] and [[s2]]  listings 1 and 2, cref does sorting!
- cref, 3 :: Lsts. [[s1]], [[s3]] and [[s4]]  listings 1, 3 and 4
- cref, 4 :: Lsts. [[s1]], [[s2]], [[s3]] and [[s4]]  listings 1 to 4 (this seems too clever! you would have to be able to tell they were sequential.)
- Cref :: Lst. [[s1]]
- Cref :: Lsts. [[s1]] and [[s2]]

** figures

#+attr_latex: :placement [H]
#+name: g1
#+caption: figure caption g1
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]


#+attr_latex: :placement [H]
#+name: g2
#+caption: figure caption g2
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]


- ref :: [[g1]]
- nameref ::  [[g1][figure caption g1]]
- pageref :: [[g1]]
- autoref :: Fig. [[g1]]

- cref :: Fig. [[g1]]
- cref,2 :: Figs. [[g1]] and [[g2]]
- Cref :: Fig. [[g1]]
- Cref :: Figs. [[g1]] and [[g2]]

** Mixed cref

- Sec. [[#sec-intro]], Fig. [[g1]], Tabs. [[b1]] and [[b2]] and Lsts. [[s1]], [[s2]], [[s3]] and [[s4]]
- Sec. [[#sec-intro]], Fig. [[g1]], Tabs. [[b1]] and [[b2]] and Lsts. [[s1]], [[s2]], [[s3]] and [[s4]]

- Sec. [[#sec-intro]], Fig. [[g1]], Lsts. [[s1]], [[s2]], [[s3]] and [[s4]] and Tabs. [[b1]] and [[b2]]
- Sec. [[#sec-intro]], Fig. [[g1]], Lsts. [[s1]], [[s2]], [[s3]] and [[s4]] and Tabs. [[b1]] and [[b2]]

** math environments

*** Lemmas

#+name: lm-1
#+BEGIN_lemma
A named lemma
#+END_lemma

see Lem. [[lm-1]].

*** Corollary

#+name: co-1
#+BEGIN_corollary
see  Lem. [[lm-1]].
#+END_corollary

Cor. [[co-1]]

*** theorem

#+name: thm-1
#+BEGIN_theorem
I have a theorem this will work. See the margin
#+END_theorem

Margin note Thm. [[thm-1]]


* build
  :PROPERTIES:
  :CUSTOM_ID: build
  :END:

** HTML


#+BEGIN_SRC emacs-lisp
(require 'org-ref-refproc) ;; this is not loaded by default!

(let ((org-export-before-parsing-hook '(org-ref-refproc)))
  (org-open-file (org-html-export-to-html)))
#+END_SRC

#+RESULTS:

** To an org buffer

#+BEGIN_SRC emacs-lisp
(let ((org-export-before-parsing-hook '(org-ref-refproc)))
   (org-org-export-as-org))
#+END_SRC

** To ODT

See https://orgmode.org/manual/LaTeX-math-snippets.html for details about the equations. You need these options. I didn't get the latexml approach to work described there, but this worked somewhat ok.

#+options: tex:dvipng

#+BEGIN_SRC emacs-lisp
(let ((org-export-before-parsing-hook '(org-ref-refproc)))
  (org-open-file (org-odt-export-to-odt) 'system))
#+END_SRC

** docx via pandoc

ox-pandoc

#+BEGIN_SRC emacs-lisp
(require 'ox-pandoc)
(let ((org-export-before-parsing-hook '(org-ref-refproc)))
  (org-open-file (plist-get (org-pandoc-export-to-docx) 'output-file) 'system))
#+END_SRC

#+RESULTS:

** LaTeX

It isn't clear why you would go this route, since org-ref is for LaTeX in the
first place, but this does work nicely.

#+BEGIN_SRC emacs-lisp
(let ((org-export-before-parsing-hook '(org-ref-refproc)))
  (org-open-file (org-babel-latex-tex-to-pdf (org-latex-export-to-latex))))
#+END_SRC

#+RESULTS:
