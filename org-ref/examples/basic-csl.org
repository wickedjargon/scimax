#+title: A basic example of org-ref for csl export
#+options: toc:nil

These keywords specify the style for citations.

# this file must exist be a path or exist in `org-cite-csl-styles-dir'.
#+csl-style: apa-5th-edition.csl

# this must be a locales file in `org-cite-csl-locales-dir'. Defaults to en-US
#+csl-locale: en-US


* Introduction

Let's see how these get rendered.

- cite :: Effective data sharing [[cite:&kitchin-2015-examp]].

** Textual

- citet :: Effective data sharing [[citet:&kitchin-2015-examp]].

** Parenthetical

- citep :: Effective data sharing [[citep:&kitchin-2015-examp]].

** Suppress author

- citenum :: Effective data sharing [[citenum:&kitchin-2015-examp]].

** year only

- citeyear :: Effective data sharing [[citeyear:&kitchin-2015-examp]].

** locators

- single number implies page :: [[citet:See &kitchin-2015-examp  15]]
- page :: [[citet:See &kitchin-2015-examp pg 15]]
- chapter ::  [[citet:See &kitchin-2015-examp ch 15]]
- line ::  [[citet:See &kitchin-2015-examp l 15]]
- line (full label) ::  [[citet:See &kitchin-2015-examp line 15]] 
- figure ::  [[citet:See &kitchin-2015-examp fig 15]] 

These may not be supported by this CSL style.

- eq ::  [[citet:See &kitchin-2015-examp eq 15]]
- table ::  [[citet:See &kitchin-2015-examp tab 15]] 

** full examples with notes

- single with notes :: [[citet:See &kitchin-2015-examp pg 15]]
- many with notes ::  [[citet:See &kitchin-2015-examp 15;and &boes-2016-neural-networ 3]]
- many with notes and common notes ::  [[citet:See; this reference &kitchin-2015-examp 15;and &boes-2016-neural-networ 3; for example]]

** check out cross-references

#+attr_latex: :placement [H]
#+name: g1
#+caption: figure caption g1
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]


#+attr_latex: :placement [H]
#+name: g2
#+caption: figure caption g2
[[file:./.ob-jupyter/46ed61e65bf11890f8772850057bb35847f984b8.png]]


- ref :: ref:g1
- nameref ::  nameref:g1
- pageref :: pageref:g1
- autoref :: autoref:g1

- cref :: cref:g1
- cref,2 :: cref:g1,g2
- Cref :: Cref:g1
- Cref :: Cref:g1,g2

* natmove

Here are some more examples for looking in natmove:

- A cite [[cite:&kitchin-2015-examp]] in a sentence is not modified.
- A cite in a clause  [[cite:&kitchin-2015-examp]], like that one would be moved to the other side of the comma.
- A cite (in parentheses  [[cite:&kitchin-2015-examp]]) would get moved outside the parentheses.
- A cite before a colon  [[cite:&kitchin-2015-examp]]: is moved to the other side.
- A cite before a semicolon  [[cite:&kitchin-2015-examp]]; is moved to the other side.
- A cite at the end of a sentence is moved outside the sentence  cite:&kitchin-2015-examp.
- A cite at the end of an excited sentence is moved outside the sentence [[cite:&kitchin-2015-examp]]!
- A cite at the end of a question is moved outside the sentence [[cite:&kitchin-2015-examp]]?
- 
* Bibliography

bibliography:../org-ref.bib


* build :noexport:

Here are a few convenient functions you can use. These only preprocess the buffer with the CSL hook, so if you want to use the refproc, or natmove processor, you need to do a more [[fine-tuned export]].

These are registered with C-c C-e r prefix

[[elisp:(org-ref-export-as-org)]] C-c C-e rO

[[elisp:(org-ref-export-to-html)]]  C-c C-e rh

[[elisp:(org-ref-export-to-ascii)]] C-c C-e ra

[[elisp:(org-ref-export-to-odt)]] C-c C-e ro

[[elisp:(org-ref-export-to-message)]] C-c C-e re

If you want a standalone, bibtex free LaTeX/PDF export you can use

[[elisp:(org-ref-export-to-latex)]] C-c C-e rl

[[elisp:(org-ref-export-to-pdf)]] C-c C-e rp

If you want a more <<fine-tuned export>>, it would look like this. Here, if you want to use natmove, you use it first, before the cites are replaced by csl. Using refproc is what gives the cleveref links their cleverness.

** HTML

#+BEGIN_SRC emacs-lisp :results silent
(require 'org-ref-refproc)
(let ((org-export-before-parsing-hook '(org-ref-cite-natmove ;; do this first
					org-ref-csl-preprocess-buffer
					org-ref-refproc)))
  (org-open-file (org-html-export-to-html)))
#+END_SRC


** OpenDocument

#+BEGIN_SRC emacs-lisp :results silent
(let ((org-export-before-parsing-hook '(org-ref-cite-natmove ;; do this first
					org-ref-csl-preprocess-buffer
					org-ref-refproc)))
  (org-open-file (org-odt-export-to-odt) 'system))
#+END_SRC


** MS Word (docx) via pandoc

#+BEGIN_SRC emacs-lisp :results silent
(require 'org-ref-refproc)
(let ((org-export-before-parsing-hook '(org-ref-cite-natmove ;; do this first
					org-ref-csl-preprocess-buffer
					org-ref-refproc)))
  (org-open-file (plist-get (org-pandoc-export-to-docx) 'output-file) 'system))
#+END_SRC
