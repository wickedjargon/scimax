* Setup

Run this to run tests and tangle the results for CI.

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
	     '("elt" "#+BEGIN_SRC emacs-lisp :test\n?\n#+END_SRC"
	       "<src lang=\"emacs-lisp\">\n?\n</src>"))

(load-file "org-ert.el")
(load-file "org-test-setup.el")


(org-ert-tangle "all-org-test.el")
(with-current-buffer (find-file-noselect "all-org-test.el")
  (lispy--indent-region (point-min) (point-max))
  (save-buffer))
(kill-buffer "all-org-test.el")

(org-ert-run-tests)
#+END_SRC

#+RESULTS:
| [[elisp:(org-babel-goto-nth-test-block 1)][or-key-file-p]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 2)][or-key-file-p-nil]] | t |
| [[elisp:(org-babel-goto-nth-test-block 3)][swap-1]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 4)][swap-2]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 5)][orfb-3]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 6)][orfb-3a]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 7)][unique-keys]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 8)][unique-keys-sort]]  | t |
| [[elisp:(org-babel-goto-nth-test-block 9)][short-titles]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 10)][long-titles]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 11)][title-case-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 12)][title-case-2]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 13)][title-case-3]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 14)][title-case-4]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 15)][sentence-case-1]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 16)][sentence-case-2]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 17)][stringify]]         | t |
| [[elisp:(org-babel-goto-nth-test-block 18)][next-entry-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 19)][prev-entry-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 20)][get-bibtex-keys]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 21)][set-bibtex-keys]]   | t |
| [[elisp:(org-babel-goto-nth-test-block 22)][clean-year-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 23)][clean-year-2]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 24)][clean-&]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 25)][clean-comma]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 26)][clean-pages-1]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 27)][clean-doi-1]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 28)][bib-1]]             | t |
| [[elisp:(org-babel-goto-nth-test-block 29)][bib-1a]]            | t |
| [[elisp:(org-babel-goto-nth-test-block 30)][bib-2]]             | t |
| [[elisp:(org-babel-goto-nth-test-block 31)][bad-ref]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 32)][bad-file-link]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 33)][cite-export-1]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 34)][cite-export-2]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 35)][cite-export-3]]     | t |
| [[elisp:(org-babel-goto-nth-test-block 36)][label-export-1]]    | t |
| [[elisp:(org-babel-goto-nth-test-block 37)][ref-export-1]]      | t |
| [[elisp:(org-babel-goto-nth-test-block 38)][curly-1]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 39)][curly-2]]           | t |
| [[elisp:(org-babel-goto-nth-test-block 40)][bib-string]]        | t |
| [[elisp:(org-babel-goto-nth-test-block 41)][bib-list]]          | t |
| [[elisp:(org-babel-goto-nth-test-block 42)][bad-cite-1]]        | t |
| [[elisp:(org-babel-goto-nth-test-block 43)][bad-cite-1a]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 44)][bad-cite-1b]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 45)][bad-cite-1c]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 46)][bad-cite-1d]]       | t |
| [[elisp:(org-babel-goto-nth-test-block 47)][v2-1]]              | t |
| [[elisp:(org-babel-goto-nth-test-block 48)][v2-2]]              | t |
| [[elisp:(org-babel-goto-nth-test-block 49)][v2-3]]              | t |
| [[elisp:(org-babel-goto-nth-test-block 50)][v2-4]]              | t |
| [[elisp:(org-babel-goto-nth-test-block 51)][tooltip-1]]         | t |
| [[elisp:(org-babel-goto-nth-test-block 52)][tooltip-2]]         | t |
| [[elisp:(org-babel-goto-nth-test-block 53)][key-cursor]]        | t |
| [[elisp:(org-babel-goto-nth-test-block 54)][preprocess]]        | t |



* Reminders about code blocks



* Basic tests


#+name: or-key-file-p
#+BEGIN_SRC emacs-lisp :test
"Check `org-ref-key-in-file-p'"
(should
 (not
  (null
   (org-ref-key-in-file-p "kitchin-2015-examp"
			  (expand-file-name
			   "test/test-1.bib"
			   (file-name-directory (locate-library "org-ref")))))))
#+END_SRC

#+RESULTS: or-key-file-p
: t




















#+name: or-key-file-p-nil
#+BEGIN_SRC emacs-lisp :test
"Check `org-ref-key-in-file-p' for non-existent key"
(should
 (null
  (org-ref-key-in-file-p "bad-key"
			 (expand-file-name
			  "test/test-1.bib"
			  (file-name-directory (locate-library "org-ref"))))))
#+END_SRC

#+RESULTS: or-key-file-p-nil
: t































#+name: swap-1
#+BEGIN_SRC emacs-lisp :test
"org swap test"
(should
 (equal
  '(b a)
  (org-ref-swap-list-elements 0 1 '(a b))))
#+END_SRC

#+RESULTS: swap-1
: t




































#+name: swap-2
#+BEGIN_SRC emacs-lisp :test
"org swap test"
(should
 (equal
  '(a c b)
  (org-ref-swap-list-elements 1 2 '(a b c))))
#+END_SRC

#+RESULTS: swap-2
: t


































* Get bibliography


#+name: orfb-3
#+BEGIN_SRC emacs-lisp :test
"addbibresource form of bibliography."
(should
 (equal
    (list (expand-file-name
	   "test/test-1.bib"
	   (file-name-directory
	    (locate-library "org-ref"))))
    (mapcar 'file-truename
	    (org-test-with-temp-text
		(format "\\addbibresource{%s}"
			  (expand-file-name
			   "test/test-1.bib"
			   (file-name-directory
			    (locate-library "org-ref"))))
	      (org-ref-find-bibliography)))))
#+END_SRC

#+RESULTS: orfb-3
: t


































#+name: orfb-3a
#+BEGIN_SRC emacs-lisp :test
"multiple bibliographies addbibresource form of bibliography."
(should
 (equal
  (list (expand-file-name
	 "test/test-1.bib"
	 (file-name-directory
	  (locate-library "org-ref")))
	(expand-file-name
	 "test/test-2.bib"
	 (file-name-directory
	  (locate-library "org-ref"))))
  (org-test-with-temp-text
      (format "\\addbibresource{%s}
\\addbibresource{%s}"
	      (expand-file-name
	       "test/test-1.bib"
	       (file-name-directory
		(locate-library "org-ref")))
	      (expand-file-name
	       "test/test-2.bib"
	       (file-name-directory
		(locate-library "org-ref"))))
    (org-ref-find-bibliography))))
#+END_SRC

#+RESULTS: orfb-3a
: t
































#+name: unique-keys
#+BEGIN_SRC emacs-lisp :test
(should
   (equal '("kitchin-2008-alloy" "kitchin-2004-role")
	  (org-test-with-temp-text
	      "cite:kitchin-2008-alloy,kitchin-2004-role

cite:kitchin-2004-role

bibliography:tests/test-1.bib
"
	    (org-ref-get-bibtex-keys))))
#+END_SRC

#+RESULTS: unique-keys
: t



































#+name: unique-keys-sort
#+BEGIN_SRC emacs-lisp :test
(should
   (equal '("kitchin-2004-role" "kitchin-2008-alloy")
	  (org-test-with-temp-text
	      "cite:kitchin-2008-alloy,kitchin-2004-role

cite:kitchin-2004-role

bibliography:tests/test-1.bib
"
	    (org-ref-get-bibtex-keys t))))
#+END_SRC

#+RESULTS: unique-keys-sort
: t
































* Bibtex tests

#+name: short-titles
#+BEGIN_SRC emacs-lisp :test
(org-ref-bibtex-generate-shorttitles)
(prog1
    (should
     (file-exists-p "shorttitles.bib"))
  (delete-file "shorttitles.bib"))
#+END_SRC

#+RESULTS: short-titles
: t



































#+name: long-titles
#+BEGIN_SRC emacs-lisp :test
(org-ref-bibtex-generate-longtitles)

(prog1
    (should
     (file-exists-p "longtitles.bib"))
  (delete-file "longtitles.bib"))
#+END_SRC

#+RESULTS: long-titles
: t





































** Changing the case of titles

#+name: title-case-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "Examples of Effective Data Sharing"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (org-ref-title-case-article)
      (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-1
: t




































#+name: title-case-2
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "Examples of Effective Data-Sharing"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data-sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-title-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-2
: t



































#+name: title-case-3
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "An Example of Effective Data-Sharing"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {An example of effective data-sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-title-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-3
: t







































#+name: title-case-4
#+BEGIN_SRC emacs-lisp :test
(should (string=
	 "An Example of Effective Data-Sharing"
	 (with-temp-buffer
	   (bibtex-mode)
	   (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	   (insert "@book{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {An example of effective data-sharing},
  publisher = {Awesome Publishing},
  year =	 2015,
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
}")
	   (goto-char (point-min))
	   (let ((org-ref-title-case-types '(("book" "title"))))
	     (org-ref-title-case))
	   (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: title-case-4
: t











































#+name: sentence-case-1
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "Examples of effective data sharing"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-sentence-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: sentence-case-1
: t














































#+name: sentence-case-2
#+BEGIN_SRC emacs-lisp :test
(should (string=
	   "Effective data sharing: A study"
	   (with-temp-buffer
	     (bibtex-mode)
	     (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	     (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Effective Data Sharing: A study},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
	     (goto-char (point-min))
	     (org-ref-sentence-case-article)
	     (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: sentence-case-2
: t




































** Convert journal title to string
#+name: stringify
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "JCP"
    (with-temp-buffer
      (insert "@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (org-ref-stringify-journal-name)
      (bibtex-autokey-get-field "journal"))))
#+END_SRC

#+RESULTS: stringify
: t



































** next/previous bibtex entries
#+name: next-entry-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "@article{xu-2015-relat,"
    (with-temp-buffer
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing in Scientific Publishing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}

@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}

")
      (goto-char (point-min))
      (org-ref-bibtex-next-entry)
      (buffer-substring (line-beginning-position) (line-end-position)))))
#+END_SRC

#+RESULTS: next-entry-1
: t




































#+name: prev-entry-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "@article{kitchin-2015-examp,"
    (with-temp-buffer
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing in Scientific Publishing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}

@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}

")
      (re-search-backward "xu-2015")
      (org-ref-bibtex-previous-entry)
      (buffer-substring (line-beginning-position) (line-end-position)))))
#+END_SRC

#+RESULTS: prev-entry-1
: t














































** Get/set bibtex keys
#+name: get-bibtex-keys
#+BEGIN_SRC emacs-lisp :test
(should
   (equal
    '("DESC0004031" "early-career" "orgmode" "Data sharing ")
    (with-temp-buffer
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of Effective Data Sharing in Scientific Publishing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 2015,
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}

@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}

")
      (org-ref-bibtex-keywords))))
#+END_SRC

#+RESULTS: get-bibtex-keys
: t















































#+name: set-bibtex-keys
#+BEGIN_SRC emacs-lisp :test
(should
   (equal
    '("key1" "key2" "orgmode")
    (with-temp-buffer
      (insert "@article{xu-2015-relat,
  author =	 {Zhongnan Xu and John R. Kitchin},
  title =	 {Relationships Between the Surface Electronic and Chemical
                  Properties of Doped 4d and 5d Late Transition Metal Dioxides},
  keywords =	 {orgmode},
  journal =	 {The Journal of Chemical Physics},
  volume =	 142,
  number =	 10,
  pages =	 104703,
  year =	 2015,
  doi =		 {10.1063/1.4914093},
  url =		 {http://dx.doi.org/10.1063/1.4914093},
  date_added =	 {Sat Oct 24 10:57:22 2015},
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (org-ref-set-bibtex-keywords '("key1" "key2"))
      (org-ref-bibtex-keywords))))
#+END_SRC

#+RESULTS: set-bibtex-keys
: t




















































#+name: clean-year-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "2015"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {0},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-year "2015")
      (bibtex-autokey-get-field "year"))))
#+END_SRC

#+RESULTS: clean-year-1
: t













































#+name: clean-year-2
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "2015"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-year "2014")
      (bibtex-autokey-get-field "year"))))
#+END_SRC

#+RESULTS: clean-year-2
: t













































#+name: clean-&
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "Examples of \\& effective data sharing"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp,
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-&)
      (bibtex-autokey-get-field "title"))))
#+END_SRC

#+RESULTS: clean-&
: t













































#+name: clean-comma
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "@article{kitchin-2015-examp,"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {3894-3899},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-key-comma)
      (buffer-substring-no-properties (point-min)
				      (line-end-position)))))
#+END_SRC

#+RESULTS: clean-comma
: t













































#+name: clean-pages-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "123456789"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {},
  eid = {123456789},
  year =	 {2015},
  doi =		 {10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-pages)
      (bibtex-autokey-get-field "pages"))))
#+END_SRC

#+RESULTS: clean-pages-1
: t













































#+name: clean-doi-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "10.1021/acscatal.5b00538"
    (with-temp-buffer
      (insert "@article{kitchin-2015-examp
  author =	 {Kitchin, John R.},
  title =	 {Examples of & effective data sharing},
  journal =	 {ACS Catalysis},
  volume =	 {5},
  number =	 {6},
  pages =	 {},
  eid = {123456789},
  year =	 {2015},
  doi =		 {http://dx.doi.org/10.1021/acscatal.5b00538},
  url =		 { http://dx.doi.org/10.1021/acscatal.5b00538 },
  keywords =	 {DESC0004031, early-career, orgmode, Data sharing },
  eprint =	 { http://dx.doi.org/10.1021/acscatal.5b00538 },
}")
      (bibtex-mode)
      (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
      (goto-char (point-min))
      (orcb-clean-doi)
      (bibtex-autokey-get-field "doi"))))
#+END_SRC

#+RESULTS: clean-doi-1
: t














































** bibtex functionality

We rely a lot on bibtex functionality. These are tests to make sure it works as
we expect. I don't have clear evidence, but I feel like I have had trouble with
the in the past.

#+name: bib-1
#+BEGIN_SRC emacs-lisp :test
"test finding an entry in a temp-buffer"
  (should
   (= 1 (with-temp-buffer
	  (insert "@article{rippmann-2013-rethin,
  author =	 {Matthias Rippmann and Philippe Block},
  title =	 {Rethinking Structural Masonry: Unreinforced, Stone-Cut Shells},
  journal =	 {Proceedings of the ICE - Construction Materials},
  volume =	 166,
  number =	 6,
  pages =	 {378-389},
  year =	 2013,
  doi =		 {10.1680/coma.12.00033},
  url =		 {http://dx.doi.org/10.1680/coma.12.00033},
  date_added =	 {Mon Jun 1 09:11:23 2015},
}")
	  (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	  (bibtex-search-entry "rippmann-2013-rethin"))))
#+END_SRC

#+RESULTS: bib-1
: t















































#+name: bib-1a
#+BEGIN_SRC emacs-lisp :test
"Test finding an entry from an existing file."
(should
 (not (null
       (with-temp-buffer
	 (insert-file-contents (expand-file-name
				"test/test-1.bib"
				(file-name-directory
				 (locate-library "org-ref"))))
	 (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	 (bibtex-search-entry "kitchin-2015-examp")))))
#+END_SRC

#+RESULTS: bib-1a
: t














































#+name: bib-2
#+BEGIN_SRC emacs-lisp :test
"Test for null entry"
(should
 (null (with-temp-buffer
	 (insert-file-contents (expand-file-name
				"test/test-1.bib"
				(file-name-directory
				 (locate-library "org-ref"))))
	 (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
	 (bibtex-search-entry "bad-key"))))
#+END_SRC

#+RESULTS: bib-2
: t














































* Test labels









#+name: get-labels-5
#+BEGIN_SRC emacs-lisp :test
(should
   (= 5
      (length
       (org-test-with-temp-text
	"* header
  :PROPERTIES:
  :CUSTOM_ID: test
  :END:

#+name: one
| 3 |

** subsection <<three>>
  :PROPERTIES:
  :CUSTOM_ID: two
  :END:

label:four
"
	(org-ref-get-labels)))))
#+END_SRC

#+RESULTS: get-labels-5
: t



** bad cites/labels/refs

#+name: bad-ref
#+BEGIN_SRC emacs-lisp :test
(should
   (= 5
      (length
       (org-test-with-temp-text
	   "ref:bad1  ref:bad2 eqref:bad3 pageref:bad4 nameref:bad5"
	 (org-ref-bad-ref-candidates)))))
#+END_SRC

#+RESULTS: bad-ref
: t


















#+name: bad-file-link
#+BEGIN_SRC emacs-lisp :test
(should
   (= 5
      (length
       (org-test-with-temp-text
	"
file:not.here  [[./or.here]].

We should catch  \\attachfile{latex.style} too.

Why don't we catch [[attachfile:filepath]] or attachfile:some.file?
I think they must be defined in jmax, and are unknown links if it is
not loaded.
"
	(org-add-link-type "attachfile" nil nil)
	(org-ref-bad-file-link-candidates)))))
#+END_SRC

#+RESULTS: bad-file-link
: t




















* exports

#+name: cite-export-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\cite{kitchin-2008-alloy}
"
    (org-export-string-as "cite:kitchin-2008-alloy" 'latex t)))
#+END_SRC

#+RESULTS: cite-export-1
: t



















#+name: cite-export-2
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\cite[page 2]{kitchin-2008-alloy}
"
    (org-export-string-as "[[cite:page 2;&kitchin-2008-alloy]]" 'latex t)))
#+END_SRC

#+RESULTS: cite-export-2
: t




















#+name: cite-export-3
#+BEGIN_SRC emacs-lisp :test
(should
 (string=
  "\\cite[page 2][post text]{kitchin-2008-alloy}
"
  (org-export-string-as  "[[cite:page 2;&kitchin-2008-alloy;post text]]" 'latex t)))
#+END_SRC

#+RESULTS: cite-export-3
: t




















** labels
#+name: label-export-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\label{test}
"
    (org-export-string-as "label:test" 'latex t)))
#+END_SRC

#+RESULTS: label-export-1
: t




















** ref
#+name: ref-export-1
#+BEGIN_SRC emacs-lisp :test
(should
   (string=
    "\\ref{test}
"
    (org-export-string-as "ref:test" 'latex t)))
#+END_SRC

#+RESULTS: ref-export-1
: t


















* org-ref-glossary

#+name: curly-1
#+BEGIN_SRC emacs-lisp :test
(should
   (= 2
      (org-test-with-temp-text
	  "{}"
	(require 'org-ref-glossary)
	(or-find-closing-curly-bracket))))
#+END_SRC

#+RESULTS: curly-1
: t
















#+name: curly-2
#+BEGIN_SRC emacs-lisp :test
(should
   (= 4
      (org-test-with-temp-text
	  "{{}}"
	(require 'org-ref-glossary)
	(or-find-closing-curly-bracket))))
#+END_SRC

#+RESULTS: curly-2
: t















* bib tests

#+name: bib-string
#+BEGIN_SRC emacs-lisp :test
(should
 (equal
  (let ((bibtex-completion-bibliography "test.bib"))
    (org-test-with-temp-text
	""
      (org-ref-find-bibliography)))
  '("test.bib")))
#+END_SRC

#+RESULTS: bib-string
: t















#+RESULTS: curly-3
| test.bib |



#+name: bib-list
#+BEGIN_SRC emacs-lisp :test
(should
 (equal
  (let ((bibtex-completion-bibliography '("test.bib")))
    (org-test-with-temp-text
	""
      (org-ref-find-bibliography)))
  '("test.bib")))
#+END_SRC

#+RESULTS: bib-list
: t


















#+name: bad-cite-1
#+BEGIN_SRC emacs-lisp :test
(should (= 1 (length (let ((bibtex-completion-bibliography "test-1.bib"))
    (org-test-with-temp-text
	"cite:tree"
      (org-ref-bad-cite-candidates))))))

#+END_SRC

#+RESULTS: bad-cite-1
: t















#+RESULTS:
: t

#+name: bad-cite-1a
#+BEGIN_SRC emacs-lisp :test
(should (= 0 (length (let ((bibtex-completion-bibliography (expand-file-name
							    "test/test-1.bib"
							    (file-name-directory (locate-library "org-ref")))))
		       (org-test-with-temp-text
			   "cite:&xu-2015-tunin-oxide"
			 (org-ref-bad-cite-candidates))))))
#+END_SRC

#+RESULTS: bad-cite-1a
: t













#+name: bad-cite-1b
#+BEGIN_SRC emacs-lisp :test
(should (= 0 (length (let ((bibtex-completion-bibliography (expand-file-name
							    "test/test-1.bib"
							    (file-name-directory (locate-library "org-ref")))))
		       (org-test-with-temp-text
			   "cite:xu-2015-tunin-oxide"
			 (org-ref-bad-cite-candidates))))))

#+END_SRC

#+RESULTS: bad-cite-1b
: t














#+name: bad-cite-1c
#+BEGIN_SRC emacs-lisp :test
(should (= 0 (length (let ((bibtex-completion-bibliography (list (expand-file-name
							    "test/test-1.bib"
							    (file-name-directory (locate-library "org-ref"))))))
		       (org-test-with-temp-text
			   "cite:&xu-2015-tunin-oxide"
			 (org-ref-bad-cite-candidates))))))
#+END_SRC

#+RESULTS: bad-cite-1c
: t














#+name: bad-cite-1d
#+BEGIN_SRC emacs-lisp :test
(should (= 0 (length (let ((bibtex-completion-bibliography (expand-file-name
							    "test/test-1.bib"
							    (file-name-directory (locate-library "org-ref")))))
		       (org-test-with-temp-text
			   "cite:xu-2015-tunin-oxide"
			 (org-ref-bad-cite-candidates))))))

#+END_SRC

#+RESULTS: bad-cite-1d
: t













* v2 to v3 conversion

#+name: v2-1
#+BEGIN_SRC emacs-lisp :test 
(should (string= "[[cite:&xu-2015-tunin-oxide]]"
		 (car (org-test-with-temp-text
		     "cite:xu-2015-tunin-oxide"
		   (org-ref-v2-cites-to-v3)))))

#+END_SRC

#+RESULTS: v2-1
: t







t


#+name: v2-2
#+BEGIN_SRC emacs-lisp :test
(should (string= "[[citeauthor:&xu-2015-tunin-oxide]]"
		 (car (org-test-with-temp-text
		     "citeauthor:xu-2015-tunin-oxide"
		   (org-ref-v2-cites-to-v3)))))

#+END_SRC

#+RESULTS: v2-2
: t







t


#+name: v2-3
#+BEGIN_SRC emacs-lisp :test 
(should (string= "[[citep:prenote;&xu-2015-tunin-oxide;postnote]]"
		 (car (org-test-with-temp-text
		     "[[citep:xu-2015-tunin-oxide][prenote::postnote]]"
		   (org-ref-v2-cites-to-v3)))))

#+END_SRC

#+RESULTS: v2-3
: t







t


#+name: v2-4
#+BEGIN_SRC emacs-lisp :test 
(should (string= "[[citep:&key1;&key2]]"
		 (car (org-test-with-temp-text
			  "citep:key1,key2"
		   (org-ref-v2-cites-to-v3)))))

#+END_SRC

#+RESULTS: v2-4
: t








#+name: tooltip-1
#+BEGIN_SRC emacs-lisp :test 
(should
 (string= " Kitchin, J. R. (2021). Simple title. The Journal of Reproducible Science, 1(1), 1."
	  (with-temp-buffer
	    (org-mode)
	    (insert
	     (format
	     "[[cite:&jk-2021]]
bibliography:%s"
	     (expand-file-name
	       "test/test-1.bib"
	       (file-name-directory
		(locate-library "org-ref")))))
	    (font-lock-fontify-buffer)
	    (goto-char 8)
	    (display-local-help))))
#+END_SRC

#+RESULTS: tooltip-1
: t










#+name: tooltip-2
#+BEGIN_SRC emacs-lisp :test 
(should
 (string= " Kitchin, J. R. (2021). Simple title. The Journal of Reproducible Science, 1(1), 1."
	  (with-temp-buffer
	    (org-mode)
	    (insert
	     (format
	      "[[cite:&jk-2021]]
bibliography:%s"
	      (expand-file-name
	       "test/test-1.bib"
	       (file-name-directory
		(locate-library "org-ref")))))
	    (font-lock-fontify-buffer)
	    (goto-char 8)
	    (org-no-properties (org-ref-cite-tooltip (selected-window) (selected-frame) 8)))))
#+END_SRC

#+RESULTS: tooltip-2
: t








#+name: key-cursor
#+BEGIN_SRC emacs-lisp :test 
(should
 (string= "jk-2021"
	  (with-temp-buffer
	    (org-mode)
	    (insert
	     (format
	      "[[cite:&jk-2021]]
bibliography:%s"
	      (expand-file-name
	       "test/test-1.bib"
	       (file-name-directory
		(locate-library "org-ref")))))
	    (font-lock-fontify-buffer)
	    (goto-char 8)
	    (org-ref-get-bibtex-key-under-cursor))))
#+END_SRC

#+RESULTS: key-cursor
: t




* export try

This should just raise no error.

#+name: preprocess
#+BEGIN_SRC emacs-lisp :test
(message "**************** org-version : %s" (org-version))
(with-temp-buffer
	    (org-mode)
	    (insert
	     (format
	      "[[cite:&jk-2021]]
bibliography:%s"
	      (expand-file-name
	       "test/test-1.bib"
	       (file-name-directory
		(locate-library "org-ref")))))
	    (font-lock-fontify-buffer)
(org-ref-process-buffer 'html)
t)
#+END_SRC

#+RESULTS: preprocess
: t



