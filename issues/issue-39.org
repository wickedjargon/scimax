Trying sympy in org.
#+NAME: b40c89ca-9952-43a4-983c-336f01b5d6cb
#+BEGIN_SRC ipython :session :results output drawer
from sympy import *
# commenting out init_printing() results in no output
init_printing()
#+END_SRC

#+RESULTS: b40c89ca-9952-43a4-983c-336f01b5d6cb
:RESULTS:


:END:

#+NAME: e631a1a0-3f4d-49d9-9888-f4f53de62884
#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results text/plain
3+2
#+END_SRC

#+RESULTS: e631a1a0-3f4d-49d9-9888-f4f53de62884
:RESULTS:
5
:END:

#+NAME: bb292d17-2879-4607-9b48-c2a9f1931f4a
#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results image/png
3+2
#+END_SRC

#+RESULTS: bb292d17-2879-4607-9b48-c2a9f1931f4a
:RESULTS:
[[file:ipython-inline-images/ob-ipython-7e1abb69fd20d3cc6fa6da490e4c5c00.png]]
:END:


You need this setting to get normal sized images.

#+BEGIN_SRC emacs-lisp
(setq org-image-actual-width t)
#+END_SRC

#+RESULTS:
: t

#+NAME: 69a10fa0-6e4c-4efa-b720-96b7fc86a29b
#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results image/png
3+2
#+END_SRC

#+RESULTS: 69a10fa0-6e4c-4efa-b720-96b7fc86a29b
:RESULTS:
[[file:ipython-inline-images/ob-ipython-7e1abb69fd20d3cc6fa6da490e4c5c00.png]]
:END:


#+BEGIN_SRC emacs-lisp
(list *org-babel-async-ipython-running-cell* *org-babel-async-ipython-queue*)
#+END_SRC

#+RESULTS:



#+NAME: 77b5b6fa-191b-45c0-be5b-d392afcd758a
#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results image/png
var('x y')
x**2 + y
#+END_SRC

#+RESULTS: 77b5b6fa-191b-45c0-be5b-d392afcd758a
:RESULTS:
[[file:ipython-inline-images/ob-ipython-da6fb3a34919a4f694cfaae45b6f0868.png]]
:END:


Using sympy in org mode.

#+BEGIN_SRC ipython :session :results verbatim drawer
from sympy import *
init_printing()
#+END_SRC

#+RESULTS:
:RESULTS:
:END:

#+NAME: 4583a673-c6a6-4fb2-9497-5c37f8363dde
#+BEGIN_SRC ipython :session :results verbatim drawer :exports none
def myprinter(s):
    return "\[ " + latex(s) + " \]"
init_printing(pretty_printer=myprinter)
#+END_SRC

#+RESULTS: 4583a673-c6a6-4fb2-9497-5c37f8363dde
:RESULTS:


:END:

#+RESULTS:
:RESULTS:
:END:

#+NAME: a88da84a-0ccd-429f-8084-67c6b16fc2b3
#+BEGIN_SRC ipython :session :results verbatim drawer :exports both :ob-ipython-results image/png
var('x y')
sqrt(x**2 + y)
#+END_SRC

#+RESULTS: a88da84a-0ccd-429f-8084-67c6b16fc2b3
:RESULTS:
[[file:ipython-inline-images/ob-ipython-b5a252158ecffd27ade3a245b3d4f3d9.png]]
:END:


* Issue	79

#+NAME: 1aae8a15-36ee-495e-b1b8-e8b46319adfb
#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results text/plain
import pandas as pd
import numpy as np
import datetime as dt

def makeSim(nHosps, nPatients):
    df = pd.DataFrame()
    df['patientid'] = range(nPatients)
    df['hospid'] = np.random.randint(0, nHosps, nPatients)
    df['sex'] = np.random.randint(0, 2, nPatients)
    df['age'] = np.random.normal(65,18, nPatients)
    df['race'] = np.random.randint(0, 4, nPatients)
    df['cptCode'] = np.random.randint(1, 100, nPatients)
    df['rdm30d'] = np.random.uniform(0, 1, nPatients) < 0.1
    df['mort30d'] = np.random.uniform(0, 1, nPatients) < 0.2
    df['los'] = np.random.normal(8, 2, nPatients)
    return df

discharges = makeSim(50, 10000)
discharges.head()
#+END_SRC

#+RESULTS: 1aae8a15-36ee-495e-b1b8-e8b46319adfb
:RESULTS:
   patientid  hospid  sex        age  race  cptCode rdm30d mort30d        los
0          0      36    1  83.313252     2        2  False   False   9.306841
1          1      27    1  47.986305     1       59   True   False   7.620877
2          2       5    0  58.766973     2       70  False   False   4.488000
3          3      26    1  87.605188     2        2  False   False  10.660902
4          4      43    1  63.589897     2        8  False   False   7.844648
:END:

* More issue 39

#+BEGIN_SRC ipython :session :results value verbatim drawer
from sympy import *
init_printing()
var('x y z')
f = sin(x**2 + y * sqrt(z))
f.diff(x)
#+END_SRC

#+RESULTS:
:RESULTS:

       ⎛ 2       ⎞
2⋅x⋅cos⎝x  + y⋅√z⎠
[[file:ipython-inline-images/ob-ipython-6bcd3836ac1d16df501678604842cfa0.png]]
#+BEGIN_EXPORT latex
$$2 x \cos{\left (x^{2} + y \sqrt{z} \right )}$$
#+END_EXPORT
:END:


#+BEGIN_SRC ipython :session :output verbatim drawer :ob-ipython-results text/html
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline

df = pd.DataFrame(np.random.randn(6,4),index=pd.date_range('1/1/2000',periods=6, freq='1h'))
df
#+END_SRC

#+RESULTS:
:RESULTS:
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2000-01-01 00:00:00</th>
      <td>0.001790</td>
      <td>-1.056677</td>
      <td>-1.214705</td>
      <td>0.396495</td>
    </tr>
    <tr>
      <th>2000-01-01 01:00:00</th>
      <td>0.073688</td>
      <td>-0.629659</td>
      <td>-0.724991</td>
      <td>1.696606</td>
    </tr>
    <tr>
      <th>2000-01-01 02:00:00</th>
      <td>-0.191440</td>
      <td>-1.042789</td>
      <td>0.003063</td>
      <td>0.153374</td>
    </tr>
    <tr>
      <th>2000-01-01 03:00:00</th>
      <td>-0.337717</td>
      <td>-0.048725</td>
      <td>-0.093275</td>
      <td>-0.769789</td>
    </tr>
    <tr>
      <th>2000-01-01 04:00:00</th>
      <td>0.764575</td>
      <td>-0.871875</td>
      <td>-1.239146</td>
      <td>-0.544874</td>
    </tr>
    <tr>
      <th>2000-01-01 05:00:00</th>
      <td>-0.037133</td>
      <td>-0.480411</td>
      <td>0.408816</td>
      <td>0.209566</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

#+BEGIN_SRC ipython :session :results verbatim drawer :ob-ipython-result text/png
df.plot(subplots=True, layout=(2,2), figsize=(10,10));
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x1156654e0>
[[file:ipython-inline-images/ob-ipython-514ae259bd3fb9791a1b7154f2449a08.png]]
:END:
